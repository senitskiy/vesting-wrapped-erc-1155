1) VestingManager - 0x82e5a37C3E6D594BA2141dc2Ec87Bd9A6fbefBAd
    1.1 deploy
    1.2 setStart    - 1715680362
    1.3 setDuration - 31556926  (+1 year)

2) WalletFactory - 0x0f09cdE65692F9877E4C31093E3389BE292bce20
    1.1 deploy
    1.2 createManagedVestingWallet
        beneficiary     = 0x23D71E50310DFEF63AEA4673F2FfAfAD74Af9b8D
        vestingManager  = 0x82e5a37C3E6D594BA2141dc2Ec87Bd9A6fbefBAd

    return VESTINGWALLET = 0xdbEDee6A320E22cebdbf6dDe3f4C47ac3E880506

3) ERC20 - 0xa2eA8cFEa1f394A954E7246d5BFCFCeEF95Ec185
    1.1. deploy
    1.2. approve  
        spender = 0x0f09cdE65692F9877E4C31093E3389BE292bce20
        amount  = 1000000000000   

4) call addSale {WalletFactory}
    sale_ = 0xa2eA8cFEa1f394A954E7246d5BFCFCeEF95Ec185


5) call VESTINGWALLET    

1747205562







//////////////////////////////////////////////////////////////
1)
     - erc20
    0xbB12E6892b95699f4A354BdC3fdC0CCbaF327330
    0x98597142996F9768Ce1A450ad8C51C0B15fC5f28

2)  vestingManager

2.1 - deploy
2.2 - approve erc20 to vestingManager

3)  vestinToken


    Name=WwrapVesting1155
    Symbol=WWV1155
    baseToken=0xb5865b48cd072800Aa27Ce0ae368F85D5E6aCE04    0xbB12E6892b95699f4A354BdC3fdC0CCbaF327330
    minter=0x23D71E50310DFEF63AEA4673F2FfAfAD74Af9b8D
    vesting=[1715191564,604800,[[1717859164,100000000000]]]

    vesting
           ( vesting.startTime,
            vesting.cliff,
            vesting.schedule)

[1714725693,604800,[[1714725695,10000000],[1714795695,10000000]]]

https://testnet.bscscan.com/address/0xbB12E6892b95699f4A354BdC3fdC0CCbaF327330#internaltx






start = 1714725693
cliff = 604800


struct Schedule {
    uint256 endTime;
    uint256 portion;
}

Этот код - это смарт-контракт на языке программирования Solidity, который является вестинг-токен на базе ERC20. 
Он отвечает за управление разблокировкой и блокировкой средств в соответствии с определенным расписанием. 
Контракт предоставлен для ознакомительных целей и не протестирован.

Контракт реализует интерфейсы Initializable, ERC20Upgradeable, Vesting и Schedule. Он имеет модификаторы 
onlyMinter и onlyVestingManager, которые ограничивают доступ к определенным функциям только для указанных адресов.

Ключевые функции контракта включают:

    initialize - инициализирует контракт, устанавливает имя, символ, адреса минтера и базового токена.
    setVestingSchedule - устанавливает расписание вестинга для токена.
    mint - списывает базовый токен и минтит share-токен для указанного адреса.
    claim - сжигает share-токен и переводит разблокированные базовые токены на бенефициара.
    unlockedSupply - возвращает количество разблокированных токенов.
    lockedSupply - возвращает количество заблокированных токенов.
    availableBalanceOf - возвращает количество токенов, которое может быть выпущено для указанного адреса.

Контракт также имеет ряд приватных функций, которые используются для расчета разблокированных токенов и 
осуществления трансферов токенов.


Интерфейсы в контракте используются для определения набора функций, которые контракт должен реализовать. 
Это обеспечивает гибкость и модульность в дизайне смарт-контрактов, позволяя контракту реализовывать 
функциональность из нескольких интерфейсов. В данном контракте используются интерфейсы для следующих целей:

    ERC20Upgradeable - этот интерфейс определяет функции, которые обычно присутствуют в ERC20-токене. 
    В данном случае, контракт реализует его для поддержки функций работы с токенами, таких как перевод 
    токенов, получение баланса и т.д.
    Initializable - этот интерфейс используется для определения функции initializer, которая инициализирует 
    состояние контракта. Это позволяет контракту быть прокси-контрактом, который может быть инициализирован снаружи.

Использование интерфейсов позволяет контракту быть более гибким и легко модифицируемым, поскольку функции из 
интерфейсов могут быть легко заменены или расширены в будущем, если это будет необходимо.


Для обертывания данного контракта в ERC-1155 необходимо создать новый контракт, который будет использовать 
функциональность ERC-1155. Этот новый контракт должен быть спроектирован таким образом, чтобы он мог 
интегрироваться с существующим вестинг-контрактом ERC20. Вот общий подход, который можно использовать для 
создания такого контракта:

    Создайте новый смарт-контракт на языке Solidity, который будет реализовывать интерфейс ERC-1155.
    В этом контракте определите необходимые переменные и функции для работы с токенами ERC-1155. В частности, 
    вам понадобится хранить информацию о коллекции токенов, их ID, суммарный счетчик и т.д.
    Внедрите функциональность вестинга из существующего ERC20-контракта. Для этого вы можете использовать 
    функции mint, claim, unlockedSupply, lockedSupply и availableBalanceOf из оригинального контракта.
    Реализуйте нужные функции ERC-1155, такие как safeTransferFrom, safeBatchTransferFrom, balanceOf, 
    totalSupply, isApprovedForAll и т.д.
    Обеспечьте взаимодействие между вестинг-механизмом и функциями ERC-1155. Например, при переводе 
    токенов с использованием safeTransferFrom, вы должны учесть вестинг-механизм и проверить, можно 
    ли сразу переводить токены, или необходимо сначала разблокировать их с помощью claim.
    Проверьте и оптимизируйте ваш новый контракт, чтобы убедиться, что он работает корректно

